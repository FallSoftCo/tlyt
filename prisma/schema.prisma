// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  workosId    String?  @unique @map("workos_id")
  email       String?  @unique
  name        String?
  chipBalance Int      @default(0) @map("chip_balance")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  transactions Transaction[]

  @@map("users")
}

model Video {
  id                    String   @id @default(cuid())
  youtubeId             String   @unique @map("youtube_id")
  title                 String
  description           String?
  channelId             String   @map("channel_id")
  channelTitle          String   @map("channel_title")
  publishedAt           DateTime @map("published_at")
  duration              String
  tags                  String[]
  categoryId            String?  @map("category_id")
  defaultLanguage       String?  @map("default_language")
  defaultAudioLanguage  String?  @map("default_audio_language")
  dimension             String?
  definition            String?
  viewCount             BigInt?  @map("view_count")
  likeCount             BigInt?  @map("like_count")
  commentCount          BigInt?  @map("comment_count")
  privacyStatus         String?  @map("privacy_status")
  licensedContent       Boolean? @map("licensed_content")
  chipCost              Int      @map("chip_cost")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("videos")
}

model Analysis {
  id                      String   @id @default(cuid())
  userId                  String   @map("user_id")
  videoId                 String   @map("video_id")
  summary                 String
  tldr                    String
  timestampSeconds        Int[]    @map("timestamp_seconds")
  timestampDescriptions   String[] @map("timestamp_descriptions")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@map("analyses")
}

model Request {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  userPrompt  String?  @map("user_prompt")
  analysisIds String[] @map("analysis_ids")
  videoIds    String[] @map("video_ids")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("requests")
}

model View {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  videoIds    String[] @map("video_ids")
  requestIds  String[] @map("request_ids")
  analysisIds String[] @map("analysis_ids")
  isExpanded  Boolean  @map("is_expanded")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("views")
}

model History {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  viewIds            String[] @map("view_ids")
  currentPositionIndex Int    @default(0) @map("current_position_index")
  pageSize           Int      @default(20) @map("page_size")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@map("histories")
}

model ChipPackage {
  id          String   @id @default(cuid())
  name        String
  description String?
  chipAmount  Int      @map("chip_amount")
  priceUsd    Int      @map("price_usd") // Price in cents
  stripePriceId String @unique @map("stripe_price_id")
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  transactions Transaction[]

  @@map("chip_packages")
}

model Transaction {
  id            String          @id @default(cuid())
  userId        String          @map("user_id")
  type          TransactionType
  chipAmount    Int             @map("chip_amount") // Positive for purchases, negative for spending
  description   String
  stripeSessionId String?       @unique @map("stripe_session_id") // For purchases
  videoId       String?         @map("video_id") // For analysis spending
  packageId     String?         @map("package_id") // For purchases
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  user    User         @relation(fields: [userId], references: [id])
  package ChipPackage? @relation(fields: [packageId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  PURCHASE
  DEDUCTION
  REFUND
  ADMIN_CREDIT
  ADMIN_DEBIT
}
